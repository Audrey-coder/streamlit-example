# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VK0AHJBTbmmwqAJ17qnrjNJdJf-WKVLY
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller
import pmdarima as pm
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error, r2_score

# Page config
st.set_page_config(page_title="Exchange Rate Forecast", layout="wide")
st.title("ðŸ“ˆ Exchange Rate Forecasting with ARIMA & Auto ARIMA")

# Load dfmonthly_modelling.csv from the repo
@st.cache_data
def load_data():
    df = pd.read_csv("dfmonthly_modelling.csv")
    df['Date'] = pd.to_datetime(df['Date'])
    df.set_index('Date', inplace=True)
    return df

df = load_data()

st.write("### Raw Data Preview")
st.dataframe(df.head())

# Train-test split
test_size = int(len(df) * 0.2)
train = df['exchange_rate'][:-test_size]
test = df['exchange_rate'][-test_size:]

# Manual ARIMA
model = ARIMA(train, order=(0,1,1))
model_fit = model.fit()
forecast_test = model_fit.forecast(len(test))
df['forecast'] = [None]*len(train) + list(forecast_test)

st.write("### Manual ARIMA Forecast")
fig1, ax1 = plt.subplots(figsize=(12,6))
ax1.plot(df['exchange_rate'], label='Original Data')
ax1.plot(df['forecast'], label='ARIMA Forecast', color='red', linestyle='--')
ax1.axvline(x=test.index[0], color='gray', linestyle=':', label='Train/Test Split')
ax1.legend()
st.pyplot(fig1)

# Auto ARIMA
st.write("### Auto ARIMA Model Training")
with st.spinner("Training Auto ARIMA..."):
    auto_arima = pm.auto_arima(train, seasonal=False, stepwise=False, trace=False)
    forecast_test_auto = auto_arima.predict(n_periods=len(test))
    df['forecast_auto'] = [None]*len(train) + list(forecast_test_auto)

st.write("### Auto ARIMA Forecast")
fig2, ax2 = plt.subplots(figsize=(12,6))
ax2.plot(df['exchange_rate'], label='Original Data')
ax2.plot(df['forecast_auto'], label='Auto ARIMA Forecast', color='red', linestyle='--')
ax2.plot(df['forecast'], label='Manual ARIMA Forecast', color='green', linestyle='-.')
ax2.axvline(x=test.index[0], color='gray', linestyle=':', label='Train/Test Split')
ax2.legend()
st.pyplot(fig2)

# Extended forecast (12 months)
forecast_diff = auto_arima.predict(n_periods=12)
last_actual = test.iloc[-1]
forecasted_original = [last_actual + forecast_diff[0]]
for i in range(1, len(forecast_diff)):
    forecasted_original.append(forecasted_original[i - 1] + forecast_diff[i])

forecast_index = pd.date_range(start=test.index[-1] + pd.DateOffset(months=1), periods=12, freq='MS')
forecasted_original_series = pd.Series(forecasted_original, index=forecast_index, name='Manual Auto ARIMA Forecast')

st.write("### 12-Month Forecast (Auto ARIMA Extended)")
st.line_chart(forecasted_original_series)

# Accuracy metrics
y_true = test
y_pred_manual = df['forecast'].iloc[-len(test):]
y_pred_auto = df['forecast_auto'].iloc[-len(test):]
y_pred_naive = [train.iloc[-1]] * len(test)

mse_manual = mean_squared_error(y_true, y_pred_manual)
mae_manual = mean_absolute_error(y_true, y_pred_manual)

mse_auto = mean_squared_error(y_true, y_pred_auto)
mae_auto = mean_absolute_error(y_true, y_pred_auto)

mse_naive = mean_squared_error(y_true, y_pred_naive)
mae_naive = mean_absolute_error(y_true, y_pred_naive)
rmse = np.sqrt(mse_naive)
mape = mean_absolute_percentage_error(y_true, y_pred_naive) * 100
r2 = r2_score(y_true, y_pred_naive)

st.write("### ðŸ“Š Forecast Accuracy Metrics")
st.markdown(f"""
- **Manual ARIMA** - MSE: `{mse_manual:.4f}`, MAE: `{mae_manual:.4f}`
- **Auto ARIMA** - MSE: `{mse_auto:.4f}`, MAE: `{mae_auto:.4f}`
- **Naive Forecast** - MSE: `{mse_naive:.4f}`, MAE: `{mae_naive:.4f}`
- **RMSE**: `{rmse:.4f}`
- **MAPE**: `{mape:.2f}%`
- **RÂ² Score**: `{r2:.4f}`
""")