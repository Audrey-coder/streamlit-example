# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VK0AHJBTbmmwqAJ17qnrjNJdJf-WKVLY
"""

import streamlit as st
import pandas as pd
import numpy as np
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

st.set_page_config(page_title="Exchange Rate Prediction", layout="wide")
st.title("ðŸ“ˆ Exchange Rate Forecast using XGBoost")

# Load CSV directly from GitHub repo (replace with your raw GitHub URL)
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/your-username/your-repo-name/main/dfmonthly_modelling.csv"
    df = pd.read_csv(url)
    df.columns = df.columns.str.strip()  # Clean column names
    return df

df = load_data()
st.success("Data loaded from repository!")

# Prepare data
df_model = df.drop(columns=["Date"])
X_all = df_model.drop(columns=["exchange_rate"])
y = df_model["exchange_rate"]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_all, y, test_size=0.2, random_state=42)

# Train XGBoost
model_all = XGBRegressor(random_state=42)
model_all.fit(X_train, y_train)
y_pred_all = model_all.predict(X_test)

# Metrics
r2 = r2_score(y_test, y_pred_all)
rmse = np.sqrt(mean_squared_error(y_test, y_pred_all))
mae = mean_absolute_error(y_test, y_pred_all)
mape = np.mean(np.abs((y_test - y_pred_all) / y_test)) * 100
mse = mean_squared_error(y_test, y_pred_all)

# Display metrics
st.subheader("ðŸ“Š Model Performance on Test Data")
st.write(f"**RÂ² Score:** {r2:.4f}")
st.write(f"**RMSE:** {rmse:.4f}")
st.write(f"**MAE:** {mae:.4f}")
st.write(f"**MAPE:** {mape:.2f}%")
st.write(f"**MSE:** {mse:.4f}")

# Visualization
st.subheader("ðŸ“‰ Actual vs Predicted Exchange Rate")

fig, ax = plt.subplots(figsize=(12, 6))
sorted_idx = np.argsort(y_test.values)
ax.plot(y_test.values[sorted_idx], label="Actual", color='blue')
ax.plot(y_pred_all[sorted_idx], label="Predicted", color='orange')
ax.set_title("Actual vs Predicted Exchange Rate")
ax.set_xlabel("Sorted Test Samples")
ax.set_ylabel("Exchange Rate")
ax.legend()
ax.grid(True)
st.pyplot(fig)