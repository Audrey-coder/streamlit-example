# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VK0AHJBTbmmwqAJ17qnrjNJdJf-WKVLY
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Title for the app
st.title("Exponential Smoothing on Exchange Rate Data")

# Example: Load data - Replace this with your actual data loading logic
@st.cache_data
def load_data():
    # For example, read CSV
    df = pd.read_csv('exchange_rate.csv')  # Your CSV file with 'Date' and 'exchange_rate' columns
    df['Date'] = pd.to_datetime(df['Date'])
    df.set_index('Date', inplace=True)
    return df

model_df = load_data()

# Fit the Exponential Smoothing model
es_model = ExponentialSmoothing(
    model_df['exchange_rate'],
    trend='add',
    seasonal=None,
    initialization_method='estimated'
).fit()

model_df['exchange_rate_es'] = es_model.fittedvalues

# Show model parameters
st.subheader("Model Parameters")
st.write(es_model.params)

# Calculate performance metrics
mse = mean_squared_error(model_df['exchange_rate'], model_df['exchange_rate_es'])
mae = mean_absolute_error(model_df['exchange_rate'], model_df['exchange_rate_es'])
r2 = r2_score(model_df['exchange_rate'], model_df['exchange_rate_es'])

st.subheader("Performance Metrics")
st.write(f"MSE: {mse:.3f}")
st.write(f"MAE: {mae:.3f}")
st.write(f"R2: {r2:.3f}")

# Plot actual vs fitted values
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(model_df.index, model_df['exchange_rate'], label='Actual', color='purple')
ax.plot(model_df.index, model_df['exchange_rate_es'], label='Exponential Smoothing', color='orange')
ax.set_title('Exponential Smoothing Fit to Exchange Rate')
ax.set_xlabel('Date')
ax.set_ylabel('Exchange Rate')
ax.legend()
ax.grid(True)
plt.tight_layout()

st.pyplot(fig)